{"ast":null,"code":"var _jsxFileName = \"/Users/gabrieldealmeida/Programming/learning/blockchain/ethereum/faucet/react-token-faucet/src/components/Faucet.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Message from './Message';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tokenAddress = \"0x5fbdb2315678afecb367f032d93f642f64180aa3\";\n\nconst Faucet = props => {\n  _s();\n\n  const [balance, setBalance] = useState();\n  const [showBalance, setShowBalance] = useState(false);\n\n  async function getBalance() {\n    if (typeof window.ethereum !== 'undefined') {\n      const [account] = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(tokenAddress, props.tokenContract.abi, provider);\n      const balance = await contract.balanceOf(account);\n      console.log(\"Balance: \", balance.toString());\n      setBalance(balance.toString());\n      setShowBalance(true);\n    }\n  }\n\n  async function faucet() {\n    if (typeof window.ethereum !== 'undefined') {\n      const account = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(tokenAddress, props.tokenContract.abi, signer);\n      contract.faucet(account[0], 100);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        background: \"rgba(227, 104, 222, 0.71)\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Subtitle, {\n          children: \"recieve faucet ERC20 to your wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-grid gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: faucet,\n            children: \"get faucet token!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: getBalance,\n            variant: \"warning\",\n            children: \"check my balance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 9\n          }, this), showBalance ? /*#__PURE__*/_jsxDEV(Message, {\n            balance: balance\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Faucet, \"08rNwggATGEvr50ovTZa/jktNDA=\");\n\n_c = Faucet;\nexport default Faucet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Faucet\");","map":{"version":3,"sources":["/Users/gabrieldealmeida/Programming/learning/blockchain/ethereum/faucet/react-token-faucet/src/components/Faucet.js"],"names":["useState","ethers","Card","Button","Message","tokenAddress","Faucet","props","balance","setBalance","showBalance","setShowBalance","getBalance","window","ethereum","account","request","method","provider","providers","Web3Provider","contract","Contract","tokenContract","abi","balanceOf","console","log","toString","faucet","signer","getSigner","background"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { ethers } from 'ethers'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport Message from './Message'\n\nconst tokenAddress = \"0x5fbdb2315678afecb367f032d93f642f64180aa3\"\n\nconst Faucet = (props) => {\n\n  const [balance, setBalance] = useState()\n  const [showBalance, setShowBalance] = useState(false)\n\n\n  async function getBalance() {\n    if (typeof window.ethereum !== 'undefined') {\n      const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(tokenAddress, props.tokenContract.abi, provider)\n      const balance = await contract.balanceOf(account);\n      console.log(\"Balance: \", balance.toString());\n      setBalance(balance.toString());\n      setShowBalance(true);\n    }\n  }\n\n  async function faucet() {\n    if (typeof window.ethereum !== 'undefined') {\n      const account = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(tokenAddress, props.tokenContract.abi, signer);\n      contract.faucet(account[0], 100);\n    }\n  }\n    return (\n        <div>\n        <Card style={{background: \"rgba(227, 104, 222, 0.71)\"}}>\n        <Card.Body>\n        <Card.Subtitle>recieve faucet ERC20 to your wallet\n        </Card.Subtitle><br></br>\n        <div className=\"d-grid gap-2\">\n        <Button onClick={faucet}>get faucet token!</Button>\n        <Button onClick={getBalance} variant=\"warning\">check my balance</Button>\n        { showBalance ? <Message balance={balance}/> : null }\n        </div>\n        </Card.Body>\n        </Card>\n        </div>\n    )\n}\n\nexport default Faucet\n"]},"metadata":{},"sourceType":"module"}